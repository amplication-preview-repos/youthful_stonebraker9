/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { View } from "./View";
import { ViewCountArgs } from "./ViewCountArgs";
import { ViewFindManyArgs } from "./ViewFindManyArgs";
import { ViewFindUniqueArgs } from "./ViewFindUniqueArgs";
import { DeleteViewArgs } from "./DeleteViewArgs";
import { ViewService } from "../view.service";
@graphql.Resolver(() => View)
export class ViewResolverBase {
  constructor(protected readonly service: ViewService) {}

  async _viewsMeta(
    @graphql.Args() args: ViewCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [View])
  async views(@graphql.Args() args: ViewFindManyArgs): Promise<View[]> {
    return this.service.views(args);
  }

  @graphql.Query(() => View, { nullable: true })
  async view(@graphql.Args() args: ViewFindUniqueArgs): Promise<View | null> {
    const result = await this.service.view(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => View)
  async deleteView(@graphql.Args() args: DeleteViewArgs): Promise<View | null> {
    try {
      return await this.service.deleteView(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
